[gd_scene load_steps=10 format=2]

[ext_resource path="res://scenes/hud/HUD.tscn" type="PackedScene" id=2]
[ext_resource path="res://utils/AnimatedButton.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/themes/gameplay.tres" type="Theme" id=4]
[ext_resource path="res://scenes/TakingOrders.gd" type="Script" id=5]
[ext_resource path="res://assets/art/shop/shop_background.png" type="Texture" id=6]
[ext_resource path="res://assets/art/shop/shop counter.png" type="Texture" id=7]
[ext_resource path="res://scenes/environment/PotionCreation.tscn" type="PackedScene" id=8]

[sub_resource type="Shader" id=40]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || 
			regular_color.a < min(line_scale, 0.25)){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		vec2 outline_uv = regular_uv + vec2(-1.0 * ps.x, -1.0 * ps.y); 
		//Sample here, if we are out of bounds then fail
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			//We aren't a real color
			outline_sample = vec4(0);
		}
		//Is our sample empty? Is there something nearby?
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(1.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(1.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=41]
resource_local_to_scene = true
shader = SubResource( 40 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[node name="TakingOrders" type="Node2D"]
script = ExtResource( 5 )
__meta__ = {
"_edit_horizontal_guides_": [ 806.0, 1047.0 ],
"_edit_vertical_guides_": [ 1739.0 ]
}

[node name="ShopBackground" type="Sprite" parent="."]
texture = ExtResource( 6 )
centered = false

[node name="HUD" parent="." instance=ExtResource( 2 )]

[node name="ShopCounter" type="Sprite" parent="."]
texture = ExtResource( 7 )
centered = false

[node name="PotionCreation" parent="." instance=ExtResource( 8 )]
material = SubResource( 41 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 1920.0
margin_bottom = 1080.0
mouse_filter = 2
theme = ExtResource( 4 )

[node name="M" type="MarginContainer" parent="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
custom_constants/margin_right = 20
custom_constants/margin_top = 20
custom_constants/margin_left = 20
custom_constants/margin_bottom = 20

[node name="Tasks" parent="Control/M" instance=ExtResource( 3 )]
margin_left = 1651.0
margin_top = 999.0
margin_right = 1900.0
margin_bottom = 1060.0
size_flags_horizontal = 8
size_flags_vertical = 8
text = "View Tasks"
next_scene = "res://scenes/ChooseTask.tscn"

[connection signal="pressed" from="Control/M/Tasks" to="." method="_on_Tasks_pressed"]
